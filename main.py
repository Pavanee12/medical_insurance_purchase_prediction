# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb

importing dependencies
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn import metrics

"""Data collection And Analysis"""

#loading a data from csv file to pandas dataframe
insurance_dataset = pd.read_csv('/content/insurance.csv')

#print first 5 rows of dataframe
insurance_dataset.head()

#number of rows and column in the dataset
insurance_dataset.shape

#getting information about the dataset
insurance_dataset.info()

"""Categorical Features:
*  Sex
*  Smoker
*  Region
"""

#checking wherther theres some missing values
insurance_dataset.isnull().sum()

"""Data Analysis"""

#statistical measure of dataset to show mean standard deviation etc of data ,we cannot find mean value of categorical attributes
insurance_dataset.describe()

#distribution of age value
sns.set()
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['age'])
plt.title('Age Distribution')
plt.show()

#plotting for gender column which is categorise column
plt.figure(figsize=(6,6))
sns.countplot(x='sex',data=insurance_dataset)
plt.title('Sex-Distribution')
plt.show()

insurance_dataset['sex'].value_counts()

#bmi distribution in dataset
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['bmi'])
plt.title('Bmi-Distribution')
plt.show()

"""Normal BMI Range--> 18.5 to 24.9"""

#children column just need to create a count plot
plt.figure(figsize=(6,6))
sns.countplot(x='children', data=insurance_dataset)
plt.title('Children')
plt.show()

insurance_dataset['children'].value_counts()

# smoker column distribtion
plt.figure(figsize=(6,6))
sns.countplot(x='smoker', data=insurance_dataset)
plt.title('Smoker-Distribution')
plt.show()

insurance_dataset['smoker'].value_counts()

#region column
plt.figure(figsize=(6,6))
sns.countplot(x='region', data =insurance_dataset)
plt.title('region')
plt.show()

insurance_dataset['region'].value_counts()

#distribution of charge values -charges represent the insurance cost
plt.figure(figsize=(6,6))
sns.distplot(insurance_dataset['charges'])
plt.title('Charges-Distribution')
plt.show()

"""Data Pre-Processing

Encoding the categorical features
"""

#encoding sex-column  // replace  all male text as 0 aand and all female text as 1
insurance_dataset.replace({'sex':{'male':0,'female':1}}, inplace=True)

#encoding Smoker
insurance_dataset.replace({'smoker':{'yes':1 , 'no':0}} , inplace=True)

# encoding regional column
insurance_dataset.replace({'region':{'southeast':0 ,'southwest':1 ,'northeast':2 ,'northwest':3 }} , inplace=True)

"""Splitting features and Target (target here is charges which we will predict) """

#to remove column we put axis = 1 , and to remove row we put axis = 0
X = insurance_dataset.drop(columns='charges' , axis = 1 )
Y = insurance_dataset['charges']

print(X)

print(Y)

"""Splitting the data into training data and Testing Data"""

#X_train , X_test , Y_train , Y_test are four arrays //representing 20% of data
# X-train X_test is corresponding split of X 
# y-test and Y-train is corresponding split of Y
# test size = 0.2 is 20% of test data
# random state - to divide the data in 2 instances in same manner
X_train , X_test , Y_train , Y_test = train_test_split(X, Y, test_size=0.2 , random_state=2)

print(X.shape , X_train.shape , X_test.shape)

"""Training our Model"""

#loading the linear regression model
regressor = LinearRegression()

regressor.fit(X_train , Y_train)

"""Model Evaluation"""

# prediction on training data
training_data_prediction = regressor.predict(X_train)

# R-squared value lies int the rage of 0 to 1
r2_train = metrics.r2_score(Y_train, training_data_prediction)
print('R squared value :', r2_train)

"""Build a Predictive System"""

input_data = (31,1,25.74,0,1,0)

#changing input_data to a numpy array
input_data_as_numpy_array = np.asarray(input_data)

#reshape the array 
input_data_reshaped = input_data_as_numpy_array.reshape(1,-1)

prediction = regressor.predict(input_data_reshaped)
print(prediction)

print('the USD cost is USD prediction',prediction[0])
